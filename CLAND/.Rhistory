pbinom(0.05, 100, 0.127458)
pbinom(7, 100, 0.127458)
table(cland$DROPS)
numsnails = length(subset(cland$DROPS, cland$DROPS=="SNAIL"))
highlow(function(x) {mybin(x, successes=numsnails, total=length(cland$DROPS))})
pbin(8, 100, 0.1397171)
pbinom(8, 100, 0.1397171)
qbinom(0.05, 100, 0.1397171)
qbinom(0.05, 100, 0.1397170)
qbinom(0.05, 100, 0.1397171)
qbinom(0.05, 100, 0.1397172)
table(cland$DROPS)
numsnails = length(subset(cland$DROPS, cland$DROPS=="ST-RING"))
highlow(function(x) {mybin(x, successes=numsnails, total=length(cland$DROPS))})
#Finding P(Boss | Minion Kill)
#PSuccess AND PFailure > 20, can assume normality
#Data for the number of minions killed and bosses spawned
minionskilled = 688; bosseskilled=100
#Probability of spawning a boss for a given minion
pbspawn = bosseskilled/minionskilled
sdbspawn = sqrt(pbspawn * (1-pbspawn) / minionskilled)
#Creating 95% CI
pbspawn; pbspawn + c(1,-1) * qnorm(0.025) * sdbspawn
source('~/git/Misc/CLAND/CLAND.R')
source('~/git/Misc/CLAND/CLAND.R')
#CLAND Analysis -- For any errors please PM u/zoox101 on Reddit.com
#Author: u/zoox101
#Data By: u/Gandalfrod
cland = read.table("CLAND.csv", header = TRUE, sep = ",")
table(cland$DROPS)
#Finding P(Boss | Minion Kill)
#PSuccess AND PFailure > 20, can assume normality
#Data for the number of minions killed and bosses spawned
minionskilled = 688; bosseskilled=100
#Probability of spawning a boss for a given minion
pbspawn = bosseskilled/minionskilled
sdbspawn = sqrt(pbspawn * (1-pbspawn) / minionskilled)
#Creating 95% CI
pbspawn; pbspawn + c(1,-1) * qnorm(0.025) * sdbspawn
#Finding P(No Drop | BossKill)
#PSuccess AND PFailure > 20, can assume normality
pnothing = length(subset(cland$HIT, cland$HIT==0))/length(cland$HIT)
sdnothing = sqrt(pnothing * (1-pnothing) / length(cland$HIT))
pnothing; pnothing + c(1,-1) * qnorm(0.025) * sdnothing
#Finding Drop Probabilities
#PSuccess OR PFailure < 20, cannot assume normality
#Returns TRUE if pbinomial(successes, total, x) < alpha
mybin = function(x, successes=0, total=100, alpha=0.05) {
pbin = pbinom(successes, total, x)
if(pbin<alpha) return(FALSE); return(TRUE)
}
#Plays a game of higher-lower with the given function
highlow = function(func, min=0, max=1, iter=10000) {
for(i in 1:iter) {
x = (min+max)/2
if(func(x)) {min=x}
else {max=x}
}
return(x)
}
#Proability of getting a CRING
numcrings = length(subset(cland$DROPS, cland$DROPS=="CRING"))
pcring = function(x) {mybin(x, successes=numcrings, total=length(cland$DROPS))}
highlow(pcring)
#Probability of getting a SNAIL
numsnails = length(subset(cland$DROPS, cland$DROPS=="SNAIL"))
highlow(function(x) {mybin(x, successes=numsnails, total=length(cland$DROPS))})
#Probability of getting a UT+
numsnails = length(subset(cland$DROPS, cland$DROPS=="ST-RING"))
highlow(function(x) {mybin(x, successes=numsnails, total=length(cland$DROPS))})
cland = read.table("CLAND.csv", header = TRUE, sep = ",")
table(cland$DROPS)
#Finding P(Boss | Minion Kill)
#PSuccess AND PFailure > 20, can assume normality
#Data for the number of minions killed and bosses spawned
minionskilled = 688; bosseskilled=100
#Probability of spawning a boss for a given minion
pbspawn = bosseskilled/minionskilled
sdbspawn = sqrt(pbspawn * (1-pbspawn) / minionskilled)
#Creating 95% CI
pbspawn; pbspawn + c(1,-1) * qnorm(0.025) * sdbspawn
#Finding P(No Drop | BossKill)
#PSuccess AND PFailure > 20, can assume normality
pnothing = length(subset(cland$HIT, cland$HIT==0))/length(cland$HIT)
sdnothing = sqrt(pnothing * (1-pnothing) / length(cland$HIT))
pnothing; pnothing + c(1,-1) * qnorm(0.025) * sdnothing
pbspawn; pbspawn + c(1,-1) * qnorm(0.025) * sdbspawn
numuts = length(subset(cland$DROPS, cland$DROPS=="ST-RING"))
highlow(function(x) {mybin(x, successes=numuts, total=length(cland$DROPS))})
numcrings = length(subset(cland$DROPS, cland$DROPS=="CRING"))
highlow(function(x) {mybin(x, successes=numcrings, total=length(cland$DROPS))})
numcrings/length(cland$DROPS)
#Proability of getting a CRING
numcrings = length(subset(cland$DROPS, cland$DROPS=="CRING"))
numcrings/length(cland$DROPS)
highlow(function(x) {mybin(x, successes=numcrings, total=length(cland$DROPS))})
#Proability of getting a CRING
numcrings = length(subset(cland$DROPS, cland$DROPS=="CRING"))
numcrings/length(cland$DROPS)
highlow(function(x) {mybin(x, successes=numcrings, total=length(cland$DROPS))})
#Probability of getting a SNAIL
numsnails = length(subset(cland$DROPS, cland$DROPS=="SNAIL"))
numsnails/length(cland$DROPS)
highlow(function(x) {mybin(x, successes=numsnails, total=length(cland$DROPS))})
numuts = length(subset(cland$DROPS, cland$DROPS=="ST-RING"))
numuts/length(cland$DROPS)
highlow(function(x) {mybin(x, successes=numuts, total=length(cland$DROPS))})
numpots = length(cland$POTS) - length(subset(cland$POTS, cland$POTS==0))
cland = read.table("CLAND.csv", header = TRUE, sep = ",")
table(cland$DROPS)
numpots = length(cland$POTS) - length(subset(cland$POTS, cland$POTS==0))
numpots = length(cland$POTS) - length(subset(cland$POTS, cland$POTS==0))
numpots/length(cland$POTS)
highlow(function(x) {mybinhigh(x, successes=numpots, total=length(cland$POTS))})
highlow(function(x) {mybinlow(x, successes=numpots, total=length(cland$POTS))})
#Finding Drop Probabilities
#PSuccess OR PFailure < 20, cannot assume normality
#Assuming CRING, SNAIL, and White Bag drop rates are the same for each boss
#Returns TRUE if pbinomial(successes, total, x) < alpha
mybinlow = function(x, successes=0, total=100, alpha=0.05) {
pbin = pbinom(successes, total, x)
if(pbin<alpha) return(FALSE); return(TRUE)
}
#Returns TRUE if pbinomial(successes, total, x) > alpha
mybinhigh = function(x, successes=0, total=100, alpha=0.05) {
pbin = 1-pbinom(successes, total, x)
if(pbin>alpha) return(FALSE); return(TRUE)
}
#Plays a game of higher-lower with the given function
highlow = function(func, min=0, max=1, iter=10000) {
for(i in 1:iter) {
x = (min+max)/2
if(func(x)) {min=x}
else {max=x}
}
return(x)
}
#Probability of getting a potion
numpots = length(cland$POTS) - length(subset(cland$POTS, cland$POTS==0))
numpots/length(cland$POTS)
highlow(function(x) {mybinhigh(x, successes=numpots, total=length(cland$POTS))})
highlow(function(x) {mybinlow(x, successes=numpots, total=length(cland$POTS))})
cland$POTS
highlow(function(x) {mybinhigh(x, successes=numpots, total=length(cland$POTS))})
highlow(function(x) {mybinlow(x, successes=numpots, total=length(cland$POTS))})
pbinom(9, 100, 0.05526324)
pbinom(9, 100, 0.1517954)
highlow(function(x) {mybinhigh(x, successes=5, total=length(cland$POTS))})
highlow(function(x) {mybinlow(x, successes=5, total=length(cland$POTS))})
highlow(function(x) {mybinlow(x, successes=1, total=length(cland$POTS))})
highlow(function(x) {mybinlow(x, successes=2, total=length(cland$POTS))})
1 - ((1-0.025) * (1-0.025) * (1-0.050))
#Data for the number of minions killed and bosses spawned
minionskilled = 688; bosseskilled=100
#Probability of spawning a boss for a given minion
pbspawn = bosseskilled/minionskilled
sdbspawn = sqrt(pbspawn * (1-pbspawn) / minionskilled)
#Creating 95% CI
pbspawn; pbspawn + c(1,-1) * qnorm(0.025) * sdbspawn
numcrings = length(subset(cland$DROPS, cland$DROPS=="CRING"))
numcrings/length(cland$DROPS)
highlow(function(x) {mybinlow(x, successes=numcrings, total=length(cland$DROPS))})
source('~/git/Misc/CLAND/CLAND.R')
#Proability of getting a CRING
numcrings = length(subset(cland$DROPS, cland$DROPS=="CRING"))
numcrings/length(cland$DROPS)
highlow(function(x) {mybinlow(x, successes=numcrings, total=length(cland$DROPS))})
#Probability of getting a potion
numpots = length(cland$POTS) - length(subset(cland$POTS, cland$POTS==0))
numpots/length(cland$POTS)
highlow(function(x) {mybinhigh(x, successes=numpots, total=length(cland$POTS))})
highlow(function(x) {mybinlow(x, successes=numpots, total=length(cland$POTS))})
?rbinon
?rbinom
hist(rbinom(100, size=100, prob=0.3))
hist(rbinom(100, size=100, prob=0.3))
hist(rbinom(100, size=1000, prob=0.3))
hist(rbinom(100, size=1000, prob=0.03))
hist(rbinom(100, size=1000, prob=0.03))
hist(rbinom(100, size=1000, prob=0.003))
hist(rbinom(100, size=1000, prob=0.003))
hist(rbinom(100, size=1000, prob=0.003))
hist(rbinom(100, size=1000, prob=0.003))
hist(rbinom(100, size=1000, prob=0.003))
hist(rbinom(100, size=1000, prob=0.003))
hist(rbinom(100, size=1000, prob=0.3))
hist(rbinom(100, size=1000, prob=0.3))
hist(rbinom(100, size=1000, prob=0.3))
hist(rbinom(100, size=1000, prob=0.3))
hist(rbinom(100, size=1000, prob=0.3))
hist(rbinom(100, size=1000, prob=0.3))
hist(rbinom(100, size=10000, prob=0.3))
hist(rbinom(1000, size=100, prob=0.1))
hist(rbinom(10000, size=100, prob=0.1))
hist(rbinom(10000, size=100, prob=0.1))
hist(rbinom(10000, size=100, prob=0.1))
hist(rbinom(10000, size=100, prob=0.1))
hist(rbinom(10000, size=100, prob=0.1))
hist(rbinom(10000, size=100, prob=0.01))
hist(rbinom(10000, size=100, prob=0.01))
hist(rbinom(10000, size=100, prob=0.01))
hist(rbinom(10000, size=100, prob=0.01))
hist(rbinom(10000, size=100, prob=0.02))
hist(rbinom(10000, size=100, prob=0.02))
hist(rbinom(10000, size=100, prob=0.02))
hist(rbinom(10000, size=100, prob=0.02))
hist(rbinom(10000, size=100, prob=0.20))
hist(rbinom(10000, size=100, prob=0.20))
hist(rbinom(10000, size=100, prob=0.20))
hist(rbinom(10000, size=100, prob=0.20))
hist(rbinom(10000, size=100, prob=0.20))
hist(rbinom(10000, size=100, prob=0.20))
hist(rbinom(10000, size=100, prob=0.20))
hist(rbinom(10000, size=100, prob=0.20))
hist(rbinom(10000, size=100, prob=0.10))
hist(rbinom(10000, size=100, prob=0.10))
hist(rbinom(10000, size=100, prob=0.10))
hist(rbinom(10000, size=100, prob=0.10))
hist(rbinom(10000, size=100, prob=0.10))
hist(rbinom(10000, size=100, prob=0.10))
hist(rbinom(10000, size=100, prob=0.02))
hist(rbinom(10000, size=100, prob=0.02))
hist(rbinom(10000, size=100, prob=0.02))
hist(rbinom(10000, size=100, prob=0.02))
hist(rbinom(10000, size=100, prob=0.02))
hist(rbinom(10000, size=100, prob=0.02))
prob = 0.02
hist(rbinom(10000, size=100, prob=prob))
hist(rbinom(10000, size=100, prob=prob))
hist(rbinom(10000, size=100, prob=prob))
hist(rbinom(10000, size=100, prob=prob))
hist(rbinom(10000, size=100, prob=prob))
hist(rbinom(10000, size=100, prob=prob))
hist(rbinom(10000, size=100, prob=prob))
hist(rbinom(10000, size=100, prob=prob))
prob = 0.015
hist(rbinom(10000, size=100, prob=prob))
hist(rbinom(10000, size=100, prob=prob))
hist(rbinom(10000, size=100, prob=prob))
hist(rbinom(10000, size=100, prob=prob))
y = 1:10
x = 1:10
lm(y~x)
line = lm(y~x)
annova(line)
anova(line)
y = 1:10 + rnorm(0, 0.01)
line = lm(y~x)
x
y
y = 1:10
y = y + rnorm(0, 0.1)
line = lm(y~x)
y
y = 1:10
y = rnorm(y, 0.1)
y
line = lm(y~x)
lie
line
plot(y~x)
y = 1:10
y = rnorm(1, y, 0.1)
plot(y~x)
y
y = 1:10
y
rnorm(1, y, 0.1)
rnorm(1, y[0], 0.1)
rnorm(1, y[4], 0.1)
for(i in 1:10) {y[i] = rnorm(1, y[i], 0.1)}
plot(y~x)
lm(y~x)
abline(line)
anova(line)
summary(line)
y
x
abline(line)
line
line = lm(y~x)
abline(line)
anova(line)
summary(line)
?runif
x = runif(10000)
x = runif(10000)
?rbinom
y = c()
for(i in 1:10000) y = rbinom(1, size = 100, prob = y[i])
for(i in 1:10000) y = rbinom(1, size = 100, prob = x[i])
y
for(i in 1:10000) y[i] = rbinom(1, size = 100, prob = x[i])
y
df = data.frame(x, y)
df
head(df)
#Probability of getting a UT+
numuts = length(subset(cland$DROPS, cland$DROPS=="ST-RING"))
numuts/length(cland$DROPS)
highlow(function(x) {mybinlow(x, successes=numuts, total=length(cland$DROPS))})
source('~/git/Misc/CLAND/CLAND.R')
#Probability of getting a UT+
numuts = length(subset(cland$DROPS, cland$DROPS=="ST-RING"))
numuts/length(cland$DROPS)
highlow(function(x) {mybinlow(x, successes=numuts, total=length(cland$DROPS))})
#Proability of getting a CRING
numcrings = length(subset(cland$DROPS, cland$DROPS=="CRING"))
numcrings/length(cland$DROPS)
highlow(function(x) {mybinlow(x, successes=numcrings, total=length(cland$DROPS))})
sub = subset(df, df$y == 7)
sub
xgiven7
xgiven7 = sub$x
xgiven7
hist(xgiven7)
highlow(function(x) {mybinhigh(x, successes=numcrings, total=length(cland$DROPS))})
highlow(function(x) {mybinlow(x, successes=numcrings, total=length(cland$DROPS))})
#Proability of getting a CRING
numcrings = length(subset(cland$DROPS, cland$DROPS=="CRING"))
numcrings/length(cland$DROPS)
highlow(function(x) {mybinhigh(x, successes=numcrings, total=length(cland$DROPS))})
highlow(function(x) {mybinlow(x, successes=numcrings, total=length(cland$DROPS))})
length(xgiven7)
#Proability of getting a CRING
numcrings = length(subset(cland$DROPS, cland$DROPS=="CRING"))
numcrings/length(cland$DROPS)
highlow(function(x) {mybinhigh(x, successes=numcrings, total=length(cland$DROPS))})
highlow(function(x) {mybinlow(x, successes=numcrings, total=length(cland$DROPS))})
length(subset(xgiven7, (xgiven7<0.04042887 || xgiven7>0.127458))
length(subset(xgiven7, (xgiven7<0.04042887 || xgiven7>0.127458)))
subset(xgiven7, (xgiven7<0.04042887)
subset(xgiven7, (xgiven7<0.04042887))
length(subset(xgiven7, (xgiven7<0.04042887)))
length(subset(xgiven7, (xgiven7>0.127458)))
x = runif(100000)
y = c()
for(i in 1:100000) y[i] = rbinom(1, size = 100, prob = x[i])
df = data.frame(x, y)
sub = subset(df, df$y == 7)
xgiven7 = sub$x
length(xgiven7)
length(subset(xgiven7, (xgiven7>0.127458)))
length(xgiven7)
length(subset(xgiven7, (xgiven7>0.127458)))
length(subset(xgiven7, (xgiven7<0.04042887)))
60/1050
hist(xgiven7)
sort(xgiven7)
mean(xgiven7)
median(xgiven7)
x
head(y)
test = subset(df, df$y < 0.04042887)
test
numcrings = length(subset(cland$DROPS, cland$DROPS=="CRING"))
numcrings/length(cland$DROPS)
highlow(function(x) {mybinhigh(x, successes=numcrings, total=length(cland$DROPS))})
highlow(function(x) {mybinlow(x, successes=numcrings, total=length(cland$DROPS))})
test = subset(df, df$y > 0.12)
test
test = subset(test, test$y < 13)
test
test = subset(df, df$y > 0.12)
length(test)
test
length(test$y)
test = subset(test, test$y < 13)
length(test$y)
hist(test$y)
hist(test$x)
hist(test$y)
hist(test$x)
test
test = subset(df, df$x > 0.12)
test
length(test$x)
test = subsset(test, test$x < 13)
test = subset(test, test$x < 13)
test
head(Df)
head(DF)
head(df)
test = subset(df, df$x < 0.13)
head(test)
test = subset(test, test$x > 0.12)
head(test)
test
length(test)
lenght(test$x)
length(test$x)
hist(test$x)
hist(test$y)
subset(test$y, test$y <= 7)
testsub = subset(test$y, test$y <= 7)
length(testsub)
length(testsub) / length(test$x)
df
sub
xgiven7
hist(xgiven7)
sorted = sort(xgiven7)
sorted
0.05*length(sorted)
sorted[53]
sorted[1049-53]
numcrings = length(subset(cland$DROPS, cland$DROPS=="CRING"))
numcrings/length(cland$DROPS)
highlow(function(x) {mybinhigh(x, successes=numcrings, total=length(cland$DROPS))})
highlow(function(x) {mybinlow(x, successes=numcrings, total=length(cland$DROPS))})
#Proability of getting a CRING
numcrings = length(subset(cland$DROPS, cland$DROPS=="CRING"))
numcrings/length(cland$DROPS)
highlow(function(x) {mybinhigh(x, successes=numcrings, total=length(cland$DROPS))})
highlow(function(x) {mybinlow(x, successes=numcrings, total=length(cland$DROPS))})
#CLAND Analysis -- For any corrections please PM u/zoox101
#Author: u/zoox101
#Data By: u/Gandalfrod
cland = read.table("CLAND.csv", header = TRUE, sep = ",")
table(cland$DROPS)
#Finding P(Boss | Minion Kill)
#PSuccess AND PFailure > 20, can assume normality
#Data for the number of minions killed and bosses spawned
minionskilled = 688; bosseskilled=100
#Probability of spawning a boss for a given minion
pbspawn = bosseskilled/minionskilled
sdbspawn = sqrt(pbspawn * (1-pbspawn) / minionskilled)
#Creating 95% CI
pbspawn; pbspawn + c(1,-1) * qnorm(0.025) * sdbspawn
#Finding P(No Drop | BossKill)
#PSuccess AND PFailure > 20, can assume normality
pnothing = length(subset(cland$HIT, cland$HIT==0))/length(cland$HIT)
sdnothing = sqrt(pnothing * (1-pnothing) / length(cland$HIT))
pnothing; pnothing + c(1,-1) * qnorm(0.025) * sdnothing
#Finding Drop Probabilities
#PSuccess OR PFailure < 20, cannot assume normality
#Assuming CRING, SNAIL, and White Bag drop rates are the same for each boss
#Returns TRUE if pbinomial(successes, total, x) < alpha
mybinlow = function(x, successes=0, total=100, alpha=0.025) {
pbin = pbinom(successes, total, x)
if(pbin<alpha) return(FALSE); return(TRUE)
}
#Returns TRUE if pbinomial(successes, total, x) > alpha
mybinhigh = function(x, successes=0, total=100, alpha=0.025) {
pbin = 1-pbinom(successes, total, x)
if(pbin>alpha) return(FALSE); return(TRUE)
}
#Plays a game of higher-lower with the given function
highlow = function(func, min=0, max=1, iter=10000) {
for(i in 1:iter) {
x = (min+max)/2
if(func(x)) {min=x}
else {max=x}
}
return(x)
}
#Proability of getting a CRING
numcrings = length(subset(cland$DROPS, cland$DROPS=="CRING"))
numcrings/length(cland$DROPS)
highlow(function(x) {mybinhigh(x, successes=numcrings, total=length(cland$DROPS))})
highlow(function(x) {mybinlow(x, successes=numcrings, total=length(cland$DROPS))})
#Probability of getting a SNAIL
numsnails = length(subset(cland$DROPS, cland$DROPS=="SNAIL"))
numsnails/length(cland$DROPS)
highlow(function(x) {mybinlow(x, successes=numsnails, total=length(cland$DROPS))})
#Probability of getting a UT+
numuts = length(subset(cland$DROPS, cland$DROPS=="ST-RING"))
numuts/length(cland$DROPS)
highlow(function(x) {mybinlow(x, successes=numuts, total=length(cland$DROPS))})
#Probability of getting a potion
numpots = length(cland$POTS) - length(subset(cland$POTS, cland$POTS==0))
numpots/length(cland$POTS)
highlow(function(x) {mybinhigh(x, successes=numpots, total=length(cland$POTS))})
highlow(function(x) {mybinlow(x, successes=numpots, total=length(cland$POTS))})
#Proability of getting a CRING
numcrings = length(subset(cland$DROPS, cland$DROPS=="CRING"))
numcrings/length(cland$DROPS)
highlow(function(x) {mybinhigh(x, successes=numcrings, total=length(cland$DROPS))})
highlow(function(x) {mybinlow(x, successes=numcrings, total=length(cland$DROPS))})
#Proability of getting a CRING
numcrings = length(subset(cland$DROPS, cland$DROPS=="CRING"))
numcrings/length(cland$DROPS)
highlow(function(x) {mybinhigh(x, successes=numcrings, total=length(cland$DROPS))})
highlow(function(x) {mybinlow(x, successes=numcrings, total=length(cland$DROPS))})
sub = subset(df, df$y == 7)
hist(sub$x)
xgiven7 = sub$x
sorted = sort(xgiven7)
trunc(4.4)
low = trunc(length(sorted) * 0.025)
high = trunc(length(sorted) * 0.0975) + 1
#Proability of getting a CRING
numcrings = length(subset(cland$DROPS, cland$DROPS=="CRING"))
numcrings/length(cland$DROPS)
highlow(function(x) {mybinhigh(x, successes=numcrings, total=length(cland$DROPS))})
highlow(function(x) {mybinlow(x, successes=numcrings, total=length(cland$DROPS))})
sorted[low]; sorted[high]
high = trunc(length(sorted) * 0.975) + 1
#Proability of getting a CRING
numcrings = length(subset(cland$DROPS, cland$DROPS=="CRING"))
numcrings/length(cland$DROPS)
highlow(function(x) {mybinhigh(x, successes=numcrings, total=length(cland$DROPS))})
highlow(function(x) {mybinlow(x, successes=numcrings, total=length(cland$DROPS))})
sorted[low]; sorted[high]
hist(sorted)
sorted
sorted[low]; sorted[high]
#Proability of getting a CRING
numcrings = length(subset(cland$DROPS, cland$DROPS=="CRING"))
numcrings/length(cland$DROPS)
highlow(function(x) {mybinhigh(x, successes=numcrings, total=length(cland$DROPS))})
highlow(function(x) {mybinlow(x, successes=numcrings, total=length(cland$DROPS))})
