?pbinom
highlow(myqbin)
source('~/git/Misc/RCode/HighLowFunction.R')
highlow(myqbin)
pbinom(1, 100, 0.05445939)
source('~/git/Misc/RCode/HighLowFunction.R')
highlow(myqbin)
source('~/git/Misc/RCode/HighLowFunction.R')
source('~/git/Misc/RCode/HighLowFunction.R')
source('~/git/Misc/RCode/HighLowFunction.R')
highlow = function(func, min=0, max=1, iter=10000) {
highlow(mybin)
mybin(0)
mybin(1)
source('~/git/Misc/RCode/HighLowFunction.R')
highlow(mybin)
source('~/git/Misc/RCode/HighLowFunction.R')
highlow(mybin)
source('~/git/Misc/RCode/HighLowFunction.R')
highlow(mybin)
source('~/git/Misc/RCode/HighLowFunction.R')
highlow(mybin)
pbin(1, 100, 0.04655981)
pbinom(1, 100, 0.04655981)
read.table(file.choose(), header = TRUE, sep = ",")
read.table(file.choose(), header = TRUE, sep = " // ")
read.table(file.choose(), header = TRUE, sep = " // ")
read.table(file.choose(), header = TRUE, sep = ",")
read.table(file.choose(), header = TRUE, sep = ",")
cland = read.table("CLAND.csv", header = TRUE, sep = ",")
setwd("~/git/Misc/CLAND")
cland = read.table("CLAND.csv", header = TRUE, sep = ",")
head(cland)
cland
list(cland$DROPS)
pbossspawn = 100/688
pbossspawn
cland = read.table("CLAND.csv", header = TRUE, sep = ",")
minionskilled = 688; bosseskilled=100
pbspawn = 100/688
sdbspawn = sqrt(pbspawn * (1-pbspawn) / 688)
sdbspawn
qnorm(0.025)
p + c(1,-1) * z * sdbspawn
pbspawn + c(1,-1) * z * sdbspawn
z = qnorm(0.025)
pbspawn + c(1,-1) * z * sdbspawn
sdbspawn
pspawn * (1-pspawn)
pspawn * (1-pbspawn)
pbspawn * (1-pbspawn)
pbspawn * (1-pbspawn) / 688
sqrt(0.000180556)
pbspawn + c(1,-1) * z * sdbspawn
z * 0.01343711
0.01343711 - 0.02633625
?z.test
pbspawn + c(1,-1) * qnorm(0.025) * sdbspawn
pbinom(100, 688, 0.1190126)
pbinom(100, 688, 0.1716851)
sdbspawn = sqrt(pbspawn * (1-pbspawn) / minionskilled)
sdbspawn
pbspawn
pbspawn + c(1,-1) * qnorm(0.025) * sdbspawn
qnorm(0.025) * sdbspawn
0.1453488 - 0.02633626
cland
mean(numkills)
mean(cland$NUMKILLS)
1/6.79
sd(cland$NUMKILLS)
sd(cland$NUMKILLS)
6.79 + 2 * 6.555582
1 / 19.90116
cland
cland = read.table("CLAND.csv", header = TRUE, sep = ",")
cland
cland
cland = read.table("CLAND.csv", header = TRUE, sep = ",")
clan
cland
cland
cland = read.table("CLAND.csv", header = TRUE, sep = ",")
#Data for the number of minions killed and bosses spawned
minionskilled = 688; bosseskilled=100
#Probability of spawning a boss for a given minion
pbspawn = bosseskilled/minionskilled
sdbspawn = sqrt(pbspawn * (1-pbspawn) / minionskilled)
#Creating 95% CI
pbspawn + c(1,-1) * qnorm(0.025) * sdbspawn
#Data for the number of minions killed and bosses spawned
minionskilled = 688; bosseskilled=100
#Probability of spawning a boss for a given minion
pbspawn = bosseskilled/minionskilled
sdbspawn = sqrt(pbspawn * (1-pbspawn) / minionskilled)
#Creating 95% CI
pbspawn + c(1,-1) * qnorm(0.025) * sdbspawn
cland
cland$DROPS
?list
head(cland)
table(cland$DROPS)
cland$HIT
table(cland$HIT)
pnothing = length(subset(cland$HIT, 1))
pnothing = length(subset(cland$HIT, cland$HIT==1))
pnothing
pnothing = length(subset(cland$HIT, cland$HIT==0))
pnothing
sdnothing = sqrt(pnothing * (1-pnothing) / length(cland$HIT))
pnothing
pnothing = length(subset(cland$HIT, cland$HIT==0))/length(cland$HIT)
sdnothing = sqrt(pnothing * (1-pnothing) / length(cland$HIT))
sdnothing
pnothing
sdspawn
sdbspawn
pnothing + c(1,-1) * qnorm(0.025) * sdnothing
cland
table(cland$DROPS)
table(cland$DROPS)
table(cland$POTS)
table(cland$DROPS)
table(cland$DROPS)
#Finding Drop Probabilities
#PSuccess OR PFailure < 20, cannot assume normality
#Returns TRUE if pbinomial(successes, total, x) < alpha
mybin = function(x, successes=0, total=100, alpha=0.05) {
pbin = pbinom(successes, total, x)
if(pbin<alpha) return(FALSE); return(TRUE)
}
#Plays a game of higher-lower with the given function
highlow = function(func, min=0, max=1, iter=10000) {
for(i in 1:iter) {
x = (min+max)/2
if(func(x)) {min=x}
else {max=x}
}
return(x)
}
cland
table(cland)
numcrings = length(subset(cland$DROPS, cland$DROPS==CRING))
numcrings = length(subset(cland$DROPS, cland$DROPS=="CRING"))
numcrings
numcrings = length(subset(cland$DROPS, cland$DROPS=="CRING"))
pcring = function(x) {mybin(x, successes=numcrings, total=length(cland$DROPS))}
highlow(cring)
numcrings = length(subset(cland$DROPS, cland$DROPS=="CRING"))
pcring = function(x) {mybin(x, successes=numcrings, total=length(cland$DROPS))}
highlow(pcring)
pbinom(0.05, 100. 0.127458)
pbinom(0.05, 100, 0.127458)
pbinom(7, 100, 0.127458)
table(cland$DROPS)
numsnails = length(subset(cland$DROPS, cland$DROPS=="SNAIL"))
highlow(function(x) {mybin(x, successes=numsnails, total=length(cland$DROPS))})
pbin(8, 100, 0.1397171)
pbinom(8, 100, 0.1397171)
qbinom(0.05, 100, 0.1397171)
qbinom(0.05, 100, 0.1397170)
qbinom(0.05, 100, 0.1397171)
qbinom(0.05, 100, 0.1397172)
table(cland$DROPS)
numsnails = length(subset(cland$DROPS, cland$DROPS=="ST-RING"))
highlow(function(x) {mybin(x, successes=numsnails, total=length(cland$DROPS))})
#Finding P(Boss | Minion Kill)
#PSuccess AND PFailure > 20, can assume normality
#Data for the number of minions killed and bosses spawned
minionskilled = 688; bosseskilled=100
#Probability of spawning a boss for a given minion
pbspawn = bosseskilled/minionskilled
sdbspawn = sqrt(pbspawn * (1-pbspawn) / minionskilled)
#Creating 95% CI
pbspawn; pbspawn + c(1,-1) * qnorm(0.025) * sdbspawn
source('~/git/Misc/CLAND/CLAND.R')
source('~/git/Misc/CLAND/CLAND.R')
#CLAND Analysis -- For any errors please PM u/zoox101 on Reddit.com
#Author: u/zoox101
#Data By: u/Gandalfrod
cland = read.table("CLAND.csv", header = TRUE, sep = ",")
table(cland$DROPS)
#Finding P(Boss | Minion Kill)
#PSuccess AND PFailure > 20, can assume normality
#Data for the number of minions killed and bosses spawned
minionskilled = 688; bosseskilled=100
#Probability of spawning a boss for a given minion
pbspawn = bosseskilled/minionskilled
sdbspawn = sqrt(pbspawn * (1-pbspawn) / minionskilled)
#Creating 95% CI
pbspawn; pbspawn + c(1,-1) * qnorm(0.025) * sdbspawn
#Finding P(No Drop | BossKill)
#PSuccess AND PFailure > 20, can assume normality
pnothing = length(subset(cland$HIT, cland$HIT==0))/length(cland$HIT)
sdnothing = sqrt(pnothing * (1-pnothing) / length(cland$HIT))
pnothing; pnothing + c(1,-1) * qnorm(0.025) * sdnothing
#Finding Drop Probabilities
#PSuccess OR PFailure < 20, cannot assume normality
#Returns TRUE if pbinomial(successes, total, x) < alpha
mybin = function(x, successes=0, total=100, alpha=0.05) {
pbin = pbinom(successes, total, x)
if(pbin<alpha) return(FALSE); return(TRUE)
}
#Plays a game of higher-lower with the given function
highlow = function(func, min=0, max=1, iter=10000) {
for(i in 1:iter) {
x = (min+max)/2
if(func(x)) {min=x}
else {max=x}
}
return(x)
}
#Proability of getting a CRING
numcrings = length(subset(cland$DROPS, cland$DROPS=="CRING"))
pcring = function(x) {mybin(x, successes=numcrings, total=length(cland$DROPS))}
highlow(pcring)
#Probability of getting a SNAIL
numsnails = length(subset(cland$DROPS, cland$DROPS=="SNAIL"))
highlow(function(x) {mybin(x, successes=numsnails, total=length(cland$DROPS))})
#Probability of getting a UT+
numsnails = length(subset(cland$DROPS, cland$DROPS=="ST-RING"))
highlow(function(x) {mybin(x, successes=numsnails, total=length(cland$DROPS))})
cland = read.table("CLAND.csv", header = TRUE, sep = ",")
table(cland$DROPS)
#Finding P(Boss | Minion Kill)
#PSuccess AND PFailure > 20, can assume normality
#Data for the number of minions killed and bosses spawned
minionskilled = 688; bosseskilled=100
#Probability of spawning a boss for a given minion
pbspawn = bosseskilled/minionskilled
sdbspawn = sqrt(pbspawn * (1-pbspawn) / minionskilled)
#Creating 95% CI
pbspawn; pbspawn + c(1,-1) * qnorm(0.025) * sdbspawn
#Finding P(No Drop | BossKill)
#PSuccess AND PFailure > 20, can assume normality
pnothing = length(subset(cland$HIT, cland$HIT==0))/length(cland$HIT)
sdnothing = sqrt(pnothing * (1-pnothing) / length(cland$HIT))
pnothing; pnothing + c(1,-1) * qnorm(0.025) * sdnothing
pbspawn; pbspawn + c(1,-1) * qnorm(0.025) * sdbspawn
numuts = length(subset(cland$DROPS, cland$DROPS=="ST-RING"))
highlow(function(x) {mybin(x, successes=numuts, total=length(cland$DROPS))})
numcrings = length(subset(cland$DROPS, cland$DROPS=="CRING"))
highlow(function(x) {mybin(x, successes=numcrings, total=length(cland$DROPS))})
numcrings/length(cland$DROPS)
#Proability of getting a CRING
numcrings = length(subset(cland$DROPS, cland$DROPS=="CRING"))
numcrings/length(cland$DROPS)
highlow(function(x) {mybin(x, successes=numcrings, total=length(cland$DROPS))})
#Proability of getting a CRING
numcrings = length(subset(cland$DROPS, cland$DROPS=="CRING"))
numcrings/length(cland$DROPS)
highlow(function(x) {mybin(x, successes=numcrings, total=length(cland$DROPS))})
#Probability of getting a SNAIL
numsnails = length(subset(cland$DROPS, cland$DROPS=="SNAIL"))
numsnails/length(cland$DROPS)
highlow(function(x) {mybin(x, successes=numsnails, total=length(cland$DROPS))})
numuts = length(subset(cland$DROPS, cland$DROPS=="ST-RING"))
numuts/length(cland$DROPS)
highlow(function(x) {mybin(x, successes=numuts, total=length(cland$DROPS))})
numpots = length(cland$POTS) - length(subset(cland$POTS, cland$POTS==0))
cland = read.table("CLAND.csv", header = TRUE, sep = ",")
table(cland$DROPS)
numpots = length(cland$POTS) - length(subset(cland$POTS, cland$POTS==0))
numpots = length(cland$POTS) - length(subset(cland$POTS, cland$POTS==0))
numpots/length(cland$POTS)
highlow(function(x) {mybinhigh(x, successes=numpots, total=length(cland$POTS))})
highlow(function(x) {mybinlow(x, successes=numpots, total=length(cland$POTS))})
#Finding Drop Probabilities
#PSuccess OR PFailure < 20, cannot assume normality
#Assuming CRING, SNAIL, and White Bag drop rates are the same for each boss
#Returns TRUE if pbinomial(successes, total, x) < alpha
mybinlow = function(x, successes=0, total=100, alpha=0.05) {
pbin = pbinom(successes, total, x)
if(pbin<alpha) return(FALSE); return(TRUE)
}
#Returns TRUE if pbinomial(successes, total, x) > alpha
mybinhigh = function(x, successes=0, total=100, alpha=0.05) {
pbin = 1-pbinom(successes, total, x)
if(pbin>alpha) return(FALSE); return(TRUE)
}
#Plays a game of higher-lower with the given function
highlow = function(func, min=0, max=1, iter=10000) {
for(i in 1:iter) {
x = (min+max)/2
if(func(x)) {min=x}
else {max=x}
}
return(x)
}
#Probability of getting a potion
numpots = length(cland$POTS) - length(subset(cland$POTS, cland$POTS==0))
numpots/length(cland$POTS)
highlow(function(x) {mybinhigh(x, successes=numpots, total=length(cland$POTS))})
highlow(function(x) {mybinlow(x, successes=numpots, total=length(cland$POTS))})
cland$POTS
highlow(function(x) {mybinhigh(x, successes=numpots, total=length(cland$POTS))})
highlow(function(x) {mybinlow(x, successes=numpots, total=length(cland$POTS))})
pbinom(9, 100, 0.05526324)
pbinom(9, 100, 0.1517954)
highlow(function(x) {mybinhigh(x, successes=5, total=length(cland$POTS))})
highlow(function(x) {mybinlow(x, successes=5, total=length(cland$POTS))})
highlow(function(x) {mybinlow(x, successes=1, total=length(cland$POTS))})
highlow(function(x) {mybinlow(x, successes=2, total=length(cland$POTS))})
1 - ((1-0.025) * (1-0.025) * (1-0.050))
